import React, { useState } from "react";
import "./DietitianSettings.css";
import jsPDF from "jspdf";

const DietitianSettings = ({ user, onClose }) => {
  const [editing, setEditing] = useState(false);
  const [updatedUser, setUpdatedUser] = useState({
    name: user?.name || "",
    email: user?.email || "",
    password: user?.password || "",
  });
  const [notifications, setNotifications] = useState(
    localStorage.getItem("dietitianNotify") === "true"
  );

  // Export Data PDF
  const handleExportData = () => {
    const users = JSON.parse(localStorage.getItem("users")) || [];
    const feedbacks = JSON.parse(localStorage.getItem("dieterFeedback")) || [];

    const doc = new jsPDF();
    doc.setFont("helvetica", "bold");
    doc.setFontSize(18);
    doc.text("Dietitian Report Summary", 20, 20);
    doc.setFont("helvetica", "normal");
    doc.setFontSize(12);
    doc.text(`Generated by: ${user?.username || "Dietitian"}`, 20, 35);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, 42);
    doc.line(20, 45, 190, 45);

    let y = 60;
    doc.setFont("helvetica", "bold");
    doc.text("üë• Clients Overview:", 20, y);
    y += 10;
    doc.setFont("helvetica", "normal");

    users
      .filter((u) => u.role === "Dieter")
      .forEach((client, i) => {
        doc.text(`${i + 1}. ${client.name || client.username}`, 25, y);
        y += 8;
        if (client.goal) {
          doc.text(
            `Goal: ${client.goal.startWeight} ‚Üí ${client.goal.targetWeight} kg (${client.goal.duration} days)`,
            30,
            y
          );
          y += 8;
        }
        if (y > 270) {
          doc.addPage();
          y = 20;
        }
      });

    y += 10;
    doc.setFont("helvetica", "bold");
    doc.text("üí¨ Feedback Summary:", 20, y);
    y += 10;
    doc.setFont("helvetica", "normal");

    feedbacks.forEach((fb, i) => {
      doc.text(`${i + 1}. ${fb.user}: ${fb.message}`, 25, y);
      y += 8;
      if (y > 270) {
        doc.addPage();
        y = 20;
      }
    });

    doc.save("Dietitian_Report.pdf");
  };

  //  Save Profile Changes
  const handleSave = () => {
    const currentUser = JSON.parse(localStorage.getItem("currentUser"));
    const users = JSON.parse(localStorage.getItem("users")) || [];

    const updatedUsers = users.map((u) =>
      u.username === currentUser.username
        ? { ...u, ...updatedUser }
        : u
    );

    const newUser = { ...currentUser, ...updatedUser };
    localStorage.setItem("users", JSON.stringify(updatedUsers));
    localStorage.setItem("currentUser", JSON.stringify(newUser));
    setEditing(false);
    alert("Profile updated successfully!");
  };

  // Notifications
  const handleNotificationToggle = () => {
    const newState = !notifications;
    setNotifications(newState);
    localStorage.setItem("dietitianNotify", newState);
  };

  return (
    <div className="settings-overlay">
      <div className="settings-modal">
        <h2>‚öôÔ∏è Dietitian Settings</h2>

        {/*  Profile Section */}
        <div className="settings-section">
          <h4>üë©‚Äç‚öïÔ∏è Profile Info</h4>
          {editing ? (
            <>
              <label>Name</label>
              <input
                type="text"
                value={updatedUser.name}
                onChange={(e) =>
                  setUpdatedUser({ ...updatedUser, name: e.target.value })
                }
              />
              <label>Email</label>
              <input
                type="email"
                value={updatedUser.email}
                onChange={(e) =>
                  setUpdatedUser({ ...updatedUser, email: e.target.value })
                }
              />
              <label>Password</label>
              <input
                type="password"
                value={updatedUser.password}
                onChange={(e) =>
                  setUpdatedUser({ ...updatedUser, password: e.target.value })
                }
              />
              <div className="btn-row">
                <button className="btn-save" onClick={handleSave}>
                  Save
                </button>
                <button
                  className="btn-close"
                  onClick={() => setEditing(false)}
                >
                  Cancel
                </button>
              </div>
            </>
          ) : (
            <>
              <p><strong>Username:</strong> {user?.username}</p>
              <p><strong>Name:</strong> {user?.name || "Not Provided"}</p>
              <p><strong>Email:</strong> {user?.email || "Not Provided"}</p>
              <button className="btn-edit" onClick={() => setEditing(true)}>
                ‚úèÔ∏è Edit
              </button>
            </>
          )}
        </div>

        {/*  Export Data */}
        <div className="settings-section">
          <h4>üì¶ Export Data</h4>
          <p>Download all client data, reports, and feedback as a PDF summary.</p>
          <button className="btn-export" onClick={handleExportData}>
            Download Report
          </button>
        </div>

        {/*  Notifications */}
        <div className="settings-section">
          <h4>üîî Notifications</h4>
          <label className="switch">
            <input
              type="checkbox"
              checked={notifications}
              onChange={handleNotificationToggle}
            />
            <span className="slider"></span>
          </label>
          <p>{notifications ? "Notifications ON" : "Notifications OFF"}</p>
        </div>

        <div className="btn-row">
          <button className="btn-close" onClick={onClose}>
            Close
          </button>
        </div>
      </div>
    </div>
  );
};

export default DietitianSettings;
